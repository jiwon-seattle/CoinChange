const recurseReverse = (string) => {
    if (string === "") {
        return "";
    } else {
        var subString = string.substring(1); 
        return recurseReverse(subString)+ string[0];
    }
}


reverse("12345") = reverse("2345") + "1" 
                 = reverse("345") + "2" + "1" 
                 = reverse("45") + "3" + "2" + "1" 
                 = reverse("5") + "4" + "3" + "2" + "1"
                 = reverse("") + "5" + "4" + "3" + "2" + "1"
                 = "" + "5" + "4" + "3" + "2" + "1"


const coinCalculate = (counter) => {
    console.log("Current number: " + counter);
    if (counter === 0){
	return counter;
	}
    else {
	if (counter / 25 >= 1) {
	const quartersnums = parseInt(counter / 25);
	const remain = counter - (quartersnums * 25);
	console.log("quarters " + quartersnums);
        return coinCalculate(remain);
    } else if (counter / 10 >= 1) {
	const dimes = parseInt(counter / 10);
	const remain = counter - (dimes * 10);
	console.log("dimes " + dimes);
	return coinCalculate(remain);
    } else if (counter / 5 >= 1) {
    	const nickles = parseInt(counter / 5);
	const remain = counter - (nickles * 5);
	console.log("nickles " + nickles);
	return coinCalculate(remain);
    } else if (counter / 1 >= 1) {
	const pennies = counter / 1;
	const remain = parseInt(counter - (pennies * 1));
	console.log("pennies " + pennies);
	return coinCalculate(remain);
    }
}
}


const coins = [
    {
        "quarters" : 0;
    },
    {
        "dimes" : 10;
    },	
    {
        "nickles" : 0;
    },
    {
        "pennies" : 0;
    },
]	

const coins2 = {"quarter": 0, "dime": 0, "nickle": 0, "penny": 0};



const romanNumerals= (letters) => {
    console.log("Current letters: " + letters);
    const nums = {"Total" : 0}; 
    if (letters === ""){
	return nums.Total;
	}
    else {
	if (letters[0] === "M" || letters[0] === "m") {
        return romanNumerals(letters.substring(1)) + nums.Total + 1000;

    } else if (letters[0] === "D" || letters[0] === "d") {
	return romanNumerals(letters.substring(1)) + nums.Total + 500;

    } else if (letters[0] === "C" || letters[0] === "c") {
	return romanNumerals(letters.substring(1)) + nums.Total + 100;

    } else if (letters[0] === "L" || letters[0] === "l") {
	return romanNumerals(letters.substring(1)) + nums.Total + 50;
    } else if (letters[0] === "X" || letters[0] === "x") {
	return romanNumerals(letters.substring(1)) + nums.Total + 10;
    } else if (letters[0] === "V" || letters[0] === "v") {
	return romanNumerals(letters.substring(1)) + nums.Total + 5;
    }else if (letters[0] === "I" || letters[0] === "i") {
	return romanNumerals(letters.substring(1)) + nums.Total + 1;
    }
}
}
